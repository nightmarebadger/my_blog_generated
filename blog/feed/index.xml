<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:wfw="http://wellformedweb.org/CommentAPI/"
     >
  <channel>
    <title>NMB's Development Blog</title>
    <link>http://www.natan.termitnjak.net//blog</link>
    <description>Blog with tutorials about Python, web development and various other interesting topics from the world of computers.</description>
    <pubDate>Sun, 22 Dec 2013 20:38:48 GMT</pubDate>
    <generator>Blogofile</generator>
    <sy:updatePeriod>hourly</sy:updatePeriod>
    <sy:updateFrequency>1</sy:updateFrequency>
    <item>
      <title>Python in the wide world week - day 7, the Web</title>
      <link>http://www.natan.termitnjak.net/blog/2013/12/22/python-in-the-wide-world-week-day-7-the-web</link>
      <pubDate>Sun, 22 Dec 2013 21:31:00 CET</pubDate>
      <category><![CDATA[python]]></category>
      <guid isPermaLink="false">a7JgxvKhz0q112mPIm_X8Avv3kE=</guid>
      <description>Python in the wide world week - day 7, the Web</description>
      <content:encoded><![CDATA[<p>And the first week, in which we explored some places where Python is used in
the "real world" is coming to an end. As
<a href="/blog/2013/12/21/python-in-the-wide-world-week-day-6-science/">yesterday</a>, we
won't look at a specific program or tool, but rather an area where Python is
used a lot - the web.</p>
<h2 id="why-would-you-use-python-in-web-development">Why would you use Python in web development?</h2>
<p>Everything we talked about before this week (the readability, simplicity,
extensibility etc.), combined with <a href="https://wiki.python.org/moin/WebFrameworks">many web
frameworks</a> means that you can
definitely find something suitable for your needs and use it easier then in
many other languages/frameworks.</p>
<p>The most known frameworks are probably <a href="http://plone.org/">Plone</a>,
<a href="https://www.djangoproject.com/">Django</a> and <a href="http://www.pylonsproject.org/">The Pylons
Project</a>, each of which is used by thousands of
websites (for partial listings you can look
<a href="http://plone.org/support/sites">here</a> or <a href="http://www.djangosites.org/">here</a>,
but those listings only cover a small portion of all websites built from the
frameworks).</p>
<p>There are many famous users of the popular Python frameworks, such as
<a href="http://science.nasa.gov/">NASA</a> and <a href="http://www.fbi.gov/">FBI</a> (Plone),
<a href="https://bitbucket.org/dashboard/overview">Bitbucket</a>,
<a href="http://instagram.com/">Instagram</a> and <a href="http://www.theguardian.com/uk">The
Guardian</a> (Django) and
<a href="http://www.reddit.com/">reddit</a> (Pylons).</p>
<p>Even if you do not want to use frameworks, there are loads of different
Python-based options for you. For instance, this blog uses
<a href="http://www.blogofile.com/">Blogofile</a>, one of the <a href="http://gistpages.com/2013/08/12/complete_list_of_static_site_generators_for_python">Python static site HTML
generators</a>,
to generate static HTML which can be pushed on a server - you can even use
<a href="http://pages.github.com/">GitHub pages</a> as a free host this way.</p>
<p>Personally, I've used <a href="http://plone.org/">Plone</a> and
<a href="http://kotti.pylonsproject.org/">Kotti</a> quite a bit at <a href="http://www.termitnjak.com/">Termitnjak
d.o.o</a> and I have checked out
<a href="https://www.djangoproject.com/">Django</a>,
<a href="http://bottlepy.org/docs/dev/">Bottle</a> and <a href="http://flask.pocoo.org/">Flask</a>.</p>
<h2 id="end-of-the-week">End of the week</h2>
<p>Well this is the end of the first week, so congratulations to those who stuck
with it to the end and hopefully you learned something new :).</p>]]></content:encoded>
    </item>
    <item>
      <title>Python in the wide world week - day 6, Science</title>
      <link>http://www.natan.termitnjak.net/blog/2013/12/21/python-in-the-wide-world-week-day-6-science</link>
      <pubDate>Sat, 21 Dec 2013 23:37:00 CET</pubDate>
      <category><![CDATA[python]]></category>
      <guid isPermaLink="false">SzYxsIhSRwVPSu_ZPsyxIfVlGyY=</guid>
      <description>Python in the wide world week - day 6, Science</description>
      <content:encoded><![CDATA[<p>Today, we will not be looking at a particular program, but rather at a field
where Python is used more and more - science (of course it's especially used in
<a href="http://en.wikipedia.org/wiki/Outline_of_physical_science">physical science</a>
and <a href="http://en.wikipedia.org/wiki/Applied_science">applied science</a>).</p>
<p>More and more people are switching to Python for scientific purposes (look at
<a href="http://www.python.org/about/success/#scientific">this list</a> to see some of the
possible uses).</p>
<h2 id="why-would-you-use-python-in-science">Why would you use Python in science?</h2>
<p>Why would someone use Python instead of things like
<a href="http://www.wolfram.com/mathematica/">Mathematica</a>,
<a href="http://www.mathworks.com/products/matlab/">MatLab</a>,
<a href="http://www.r-project.org/">R</a>, <a href="http://www.gnu.org/software/octave/">Octave</a>
etc.?</p>
<h3 id="price">Price</h3>
<p>First of all, Python is free, which is often not the case with other software.
For personal use, the prices are not <em>that</em> steep, especially for students, but
if you want to use it professionally, the price quickly becomes big enough that
smaller businesses or startups just cannot afford it (for instance, Mathematica
"home" edition is 295€, the "Standard" edition is 3.185€ and the "Enterprise"
edition is 8.920€ at the time of writing<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>)</p>
<h3 id="readability">Readability</h3>
<p>Readability was a primary consideration when Python's syntax was designed. You
can often hear the joke that turning pseudo-code into Python code is just a
matter of correct indentation. This is very important in collaboration, as it
is much easier for other people (especially beginners) to understand your code
and contribute to it if they don't first need to take a few days off to
understand what it does.</p>
<h3 id="language-interoperability">Language interoperability</h3>
<p>Python is often used to glue other languages together and this can really come
in handy. For instance, let's say you already have some code that will solve
this particular part of the problem really fast, but it's written in FORTRAN,
and R would be perfect to then parse that data easily and quickly.</p>
<p>If you're using something besides Python, you will need to re-create those
functions / tools in the language you're using, or come up with a different
way. In Python however, you can simply use
<a href="http://cens.ioc.ee/projects/f2py2e/">F2PY</a> and
<a href="http://rpy.sourceforge.net/rpy2.html">RPY2</a> and use the scripts you already
have.</p>
<h3 id="balancing-high-level-and-low-level-coding">Balancing high level and low level coding</h3>
<p>As Python is a high-level programming language it often times means that some
things will naturally be slower then when written in a low-level language such
as C. There are many way around that - for instance, you could use
<a href="http://cython.org/">Cython</a> to statically type variables (you do something
like <code>cdef int x</code> to declare <code>x</code> as an integer), which gives massive speed-ups,
as typed variables are treated using low-level types rather then Python
variables.</p>
<h3 id="libraries">Libraries</h3>
<p>Python has some great libraries that are great when using Python in science. To
list just a few them that I've personally used:</p>
<p><strong><em><a href="http://www.scipy.org/">NumPy/SciPy</a>:</em></strong></p>
<p>A pair of amazing libraries for working with arrays, matrix structures, linear
algebra, numerical optimisation, random number generation, Fourier transforms,
image processing and many many more.</p>
<p>I've used these two when trying our 3D graphics using <a href="http://www.opengl.org/">OpenGL
4</a> in <a href="http://pyglet.org/">Pyglet</a>.</p>
<p><strong><em><a href="http://www.cython.org/">Cython</a>:</em></strong></p>
<p>As mentioned before, it allows you to make parts of your program faster. Used
it very little apart from testing it out myself.</p>
<p><strong><em><a href="http://www.sqlalchemy.org/">SQLAlchemy</a>:</em></strong></p>
<p>Essentially a wrapper around an SQL database, it makes working with databases a
breeze with a set of intuitive query operators, especially if you aren't used
to pure SQL commands. Combine it with <a href="http://www.sqlite.org/">sqlite</a> (which
is embedded in Python's standard library) and you can leverage databases for
scientific work easily.</p>
<p>I've used it when working witk <a href="http://kotti.pylonsproject.org/">Kotti</a>.</p>
<p><strong><em><a href="http://ipython.org/">IPython</a>:</em></strong></p>
<p>IPython is basically an enhanced Python shell, but it has grown to be much much
more. The IPython notebook is seeing more and more use in scientific circles,
as it allows you to easily make interactive presentations that can be exported
to many formats such as HTML, stripped down HTML (for using it in blogs etc.),
presentations (using <a href="http://lab.hakim.se/reveal-js/#/">reveal.js</a>), PDF and
many more. It's easy to write your own rules for exporting, so new formats can
be added if you wish to. There are even whole webpages build using only IPython
notebook with a customised HTML export (had a link here but I cannot find it
again :( ).</p>
<p>The <a href="/tutorials">tutorials</a> on this site are actually made in the notebook -
they are exported to stripped down HTML and used as the base for "tutorial
posts".</p>
<div class="footnote">
<hr />
<ol>
<li id="fn:1">
<p><a href="http://www.wolfram.com/mathematica/how-to-buy/industry-individuals.html">http://www.wolfram.com/mathematica/how-to-buy/industry-individuals.html</a>&#160;<a href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text">&#8617;</a></p>
</li>
</ol>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Python in the wide world week - day 5, YouTube</title>
      <link>http://www.natan.termitnjak.net/blog/2013/12/20/python-in-the-wide-world-week-day-5-youtube</link>
      <pubDate>Fri, 20 Dec 2013 22:18:00 CET</pubDate>
      <category><![CDATA[python]]></category>
      <guid isPermaLink="false">Ured9DqdZq7pXIgf0scwxjybdZY=</guid>
      <description>Python in the wide world week - day 5, YouTube</description>
      <content:encoded><![CDATA[<p>One of the reasons why I started this series is because I've heard words like
"<em>Yeah, Python is nice ... but it's so <strong>slow</strong> ... can you actually do
anything with it?</em>" too many times. And what is the answer? Just look at
YouTube's success.</p>
<h2 id="youtube"><a href="http://www.youtube.com/">YouTube</a></h2>
<p><a href="http://www.youtube.com/"><img src="/images/youtube_logo.jpg" alt="YouTube"></a></p>
<h3 id="what-is-youtube">What is YouTube?</h3>
<p>I'm guessing that if you're reading this, you already know what YouTube is :)</p>
<h3 id="where-is-python-used">Where is Python used?</h3>
<blockquote>
<p>Python is fast enough for our site and allows us to produce maintainable
features in record times, with a minimum of developers</p>
<p>-- Cuong Do, Software Architect</p>
</blockquote>
<p>YouTube uses Python everywhere - from new features, searching / finding videos,
running the videos etc ... YouTube currently has well over 1 million lines of
Python code.</p>
<p>Mike Solomon gave a great talk at PyCon 2012 (below, <strong>skip to the 10 minute
mark for the beginning of his talk</strong> as the things before aren't really
interesting. )</p>
<iframe width="480" height="360" src="//www.youtube.com/embed/G-lGCC4KKok" frameborder="0" allowfullscreen></iframe>

<p>For me, there are two main points to this talk:</p>
<p><strong><em>Start simple, grow when needed:</em></strong></p>
<blockquote>
<p>A scalable system is one that's not in your way, that you're sort of unaware
of. It's not buzzwords or anything like that, its just about a general
problem solving ethos ... You need flexibility to solve problems and the
minute you over specify something, you paint yourself into a corner.</p>
<p>-- Mike Solomon, PyCon 2012</p>
</blockquote>
<p><strong><em>Stay flexible:</em></strong></p>
<blockquote>
<p>How YouTube was originally designed had no bearing on what it actually
became. Does anybody know that YouTube was a dating site? [*laughter from
audience*] ... If we had designed for that I think we would be having a
substantially different conversation.</p>
<p>-- Mike Solomon, PyCon 2012</p>
</blockquote>
<p>Let's get one thing out of the way. YouTube is not only big ... it's <em>huge</em>,
it's <em>colossal</em>, <em>enormous</em>, <em>massive</em>, <em>immense</em>, <em>tremendous</em> and any other
word you can think of. Let's look at some statistics<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>
<p><strong>Viewership</strong></p>
<ul>
<li>More than 1 billion unique users visit YouTube each month</li>
<li>Over 6 billion hours of video are watched each month on YouTube—that's
    almost an hour for every person on Earth, and 50% more than last year</li>
<li>100 hours of video are uploaded to YouTube every minute</li>
<li>80% of YouTube traffic comes from outside the US</li>
<li>YouTube is localized in 61 countries and across 61 languages</li>
<li>According to Nielsen, YouTube reaches more US adults ages 18-34 than any
    cable network</li>
<li>Millions of subscriptions happen each day. The number of people subscribing
    daily is up more than 3x since last year, and the number of daily
    subscriptions is up more than 4x since last year</li>
</ul>
<p>But still, YouTube manages to work it's way through all that data using
technologies that are often held in regard as "<em>slow</em>" or "<em>not good enough</em>",
such as <a href="http://www.python.org/">Python</a>, <a href="http://www.apache.org/">Apache</a>,
<a href="http://www.mysql.com/">MySQL</a>, ... and the way they do it is explained nicely
in the video, so it's a great watch for anyone that is interested in any kind
of development and deployment.</p>
<div class="footnote">
<hr />
<ol>
<li id="fn:1">
<p><a href="http://www.youtube.com/yt/press/statistics.html">http://www.youtube.com/yt/press/statistics.html</a>&#160;<a href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text">&#8617;</a></p>
</li>
</ol>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Python in the wide world week - day 4, EVE Online</title>
      <link>http://www.natan.termitnjak.net/blog/2013/12/19/python-in-the-wide-world-week-day-4-eve-online</link>
      <pubDate>Thu, 19 Dec 2013 21:16:00 CET</pubDate>
      <category><![CDATA[python]]></category>
      <guid isPermaLink="false">ZZYPtQZVW1xyKnmqmVOrXdt21o0=</guid>
      <description>Python in the wide world week - day 4, EVE Online</description>
      <content:encoded><![CDATA[<h2 id="eve-online"><a href="http://www.eveonline.com/">EVE Online</a></h2>
<p><a href="http://www.eveonline.com/"><img src="/images/eve_online.jpg" alt="EVE Online"></a></p>
<h3 id="what-is-eve-online">What is Eve Online?</h3>
<p><a href="http://www.eveonline.com/">EVE Online</a> is a player-driven persistent world MMORPG set in a science
fiction space setting. Featuring seemingly infinite customisation on both your
pilot and your ships and a huge world, it definitely is an unique game.</p>
<p>What makes it even more special is the fact that EVE Online uses only one
"shard" - all players live in the same world (as opposed to many popular
MMORPGS, where players play on different "shards" or servers). It also features
a very "real" world, in which there is no "right" way to play - you can be a
mercenary, a miner, a trader, a member of a giant alliance (where you work with
thousands of other players towards a single goal) ... there are practically no
game or moral limits (you can sabotage other players, or even <a href="http://massively.joystiq.com/2012/10/28/eve-evolved-top-ten-ganks-scams-heists-and-events/">scam players out
of their
money</a>)
- it's all legitimate and won't have any repercussions from the game developers
  / GM's, not that that can help you much when half of the player base turns
  against you.</p>
<p>For more info, look at the <a href="http://www.eveonline.com/">official site</a> or
<a href="http://www.eveonline.com/faq/what-is-eve-online/">FAQ</a></p>
<h3 id="where-is-python-used">Where is Python used?</h3>
<blockquote>
<p>Python enabled us to create EVE Online, a massive multiplayer game, in record
time. The EVE Online server cluster runs over 50,000 simultaneous players in
a shared space simulation, most of which is created in Python. The
flexibilities of Python have enabled us to quickly improve the game
experience based on player feedback</p>
<p>-- Hilmar Veigar Petursson, CCP Games.</p>
</blockquote>
<p>Both the server and client software for <a href="http://www.eveonline.com/">EVE Online</a> are developed in
<a href="http://stackless.com/">Stackless Python</a>, which allows a large number of
players to perform tasks without the overhead of a call stack used in the
standard Python distribution. Going in depth about Stackless Python is out of
the scope of this blog post (and my current experience), but if you think it
would interest you, Google around for more info. You might also (or rather)
look at <a href="http://pypy.org/">PyPy</a> which also supports stackless mode along with
many other features. Even <a href="https://plus.google.com/105712269316285036558/posts">Christian
Tismer</a>, the creator of
Stackless Python feels that "PyPy is much superior to Stackless itself and is
the way of the future".</p>
<h3 id="gameplay-example">Gameplay example</h3>
<p>To tell you the truth, I have no idea how EVE Online plays (except that it
apparently has many many lasers / disco lights in high-end battles :P), so just
have a look at a random gameplay video I found on the web.</p>
<iframe width="560" height="315" src="//www.youtube.com/embed/WERqUb0G6vQ"
frameborder="0" allowfullscreen></iframe>]]></content:encoded>
    </item>
    <item>
      <title>Python in the wide world week - day 3, Blender</title>
      <link>http://www.natan.termitnjak.net/blog/2013/12/18/python-in-the-wide-world-week-day-3-blender</link>
      <pubDate>Wed, 18 Dec 2013 23:38:00 CET</pubDate>
      <category><![CDATA[python]]></category>
      <guid isPermaLink="false">E2DOQLWpnpegGCHo2vdqy-17C3Y=</guid>
      <description>Python in the wide world week - day 3, Blender</description>
      <content:encoded><![CDATA[<h2 id="blender"><a href="http://www.blender.org/">Blender</a></h2>
<p><a href="http://www.blender.org/"><img src="/images/blender_logo.png" alt="Blender"></a></p>
<h3 id="what-is-blender">What is Blender?</h3>
<p><a href="http://www.blender.org/">Blender</a> is a free and open source 3D animation suite. It supports the
entirety of the 3D pipeline—modeling, rigging, animation, simulation,
rendering, compositing and motion tracking, even video editing and game
creation. Advanced users employ Blender’s API for Python scripting to customize
the application and write specialized tools; often these are included in
Blender’s future releases. Blender is well suited to individuals and small
studios who benefit from its unified pipeline and responsive development
process. Examples from many Blender-based projects are available in the
showcase.<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>
<p>Even though at the beginning Blender was often criticised as not being up to
industry standards (especially on it's interface), but since Blender 2.5 was
released in 2011 with a completely reworked user interface it can easily sit
beside the major players such as Maya, 3ds Max etc.</p>
<p>It is also noted as the most all-around solution with the most extensive
feature set (and keep in mind that Maya and Max are around 3500$ each, so
that's another plus for Blender).</p>
<p>Blender has been growing in popularity even in the <a href="http://en.wikipedia.org/wiki/Blender_(software)#Use_in_the_media_industry">media
industry</a>,
with more and more bigger projects opting to use it instead of the "standard"
tools.</p>
<h3 id="where-is-python-used">Where is Python used?</h3>
<p>The feature that makes Blender stand out the most is it's Python API, which
allows anyone to easily create scripts/addons, many of which are <a href="http://wiki.blender.org/index.php/Extensions:2.6/Py/Scripts">integrated
into later
releases</a>. Since
I'm totally clueless about anything design-related, I can't tell you which ones
are good and useful, so I guess Google is your friend here :).</p>
<p>With Python and the included <code>bge</code> module you can even use Blender to create
games.</p>
<h3 id="examples-of-videos">Examples of videos</h3>
<p>Since Blender is primarily an animation suite, you can find many <a href="http://www.blenderguru.com/27-inspiring-blender-animations-that-will-make-your-jaw-drop/">great Blender
animations</a>
on the web.</p>
<p>Every 1-2 years the Blender Foundation announces a new creative project to help
drive Blender and it's innovation forward. Below you can find it's latest
project, the <a href="http://mango.blender.org/">Tears of Steel</a>. Ignore the (imo)
so-so acting and (again, imo) not the best story and focus on the animations
;).</p>
<iframe width="560" height="315" src="//www.youtube.com/embed/OHOpb2fS-cM" frameborder="0" allowfullscreen></iframe>

<p>PS: It even comes in a <a href="http://www.youtube.com/watch?v=oXzYqf_fuw4">Chinese
version</a>, using their own actors
but re-using the animations.</p>
<h3 id="examples-of-games">Examples of games</h3>
<p>While there are quite some games made in Blender, not many of them achieved
global recognition. Below is a trailer from <a href="http://deadcyborg.com/index.html">Dead
Cyborg</a>, a Steam Greenlit free donation based
oldskool sci-fi adventure game. I've read good things about it, so I'll be sure
to check it out when I get the chance.</p>
<iframe width="560" height="315" src="//www.youtube.com/embed/pex1R67yLXA" frameborder="0" allowfullscreen></iframe>

<p>I've also found Mattline1's <a href="http://mattline1.blogspot.co.uk/">blog</a> and
<a href="http://www.youtube.com/user/Mattline1">videos</a> really nice - lots of nicely
implemented good ideas, it seems he is very talented. I found his <a href="http://mattline1.blogspot.com/search/label/Sphere%20shooter">Sphere
shooter</a>
especially interesting, and I believe it nicely shows off that Blender can
actually be used for games too.</p>
<iframe width="560" height="315" src="//www.youtube.com/embed/ieP7uja8UiI" frameborder="0" allowfullscreen></iframe>

<div class="footnote">
<hr />
<ol>
<li id="fn:1">
<p>Taken from <a href="http://www.blender.org/about/">http://www.blender.org/about/</a>&#160;<a href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text">&#8617;</a></p>
</li>
</ol>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Python in the wide world week - day 2, Dropbox</title>
      <link>http://www.natan.termitnjak.net/blog/2013/12/17/python-in-the-wide-world-week-day-2-dropbox</link>
      <pubDate>Tue, 17 Dec 2013 22:27:00 CET</pubDate>
      <category><![CDATA[python]]></category>
      <guid isPermaLink="false">f2tsBBP6UV3MRGkjokFZPso2HmE=</guid>
      <description>Python in the wide world week - day 2, Dropbox</description>
      <content:encoded><![CDATA[<p>Yesterday, at the start of the very first "XXX week", we <a href="/blog/2013/12/16/python-in-the-wide-world-week-day-1-xbmc/">looked at
XBMC</a>. Today, we
will look at <a href="https://www.dropbox.com/">Dropbox</a>, a could storage file synchronisation service.</p>
<h2 id="dropbox"><a href="https://www.dropbox.com/">Dropbox</a></h2>
<p><a href="https://www.dropbox.com/"><img src="/images/dropbox_logo.png" alt="Dropbox"></a></p>
<p><a href="https://www.dropbox.com/">Dropbox</a> is a file hosting service that offers simple cloud storage and file
synchronisation for average users as well as big companies. From a humble start
in 2008 it grew faster then anyone could have predicted and <a href="http://techcrunch.com/2013/11/13/dropbox-hits-200-million-users-and-announces-new-products-for-businesses/">hit 200M users on
Nov 13,
2013</a>.
Even though it has many competitors like <a href="http://www.google.com/drive/about.html">Google
Drive</a>, <a href="http://windows.microsoft.com/en-us/skydrive/download">Microsoft
SkyDrive</a> and
<a href="https://www.box.com/">Box.net</a> (and many, many others), <a href="https://www.dropbox.com/">Dropbox</a> continues to
stand at the top of the game.</p>
<h2 id="where-is-python-used">Where is Python used?</h2>
<blockquote>
<p>It would have been virtually impossible to do Dropbox without Python</p>
<p>-- Rian Hunter, Dropbox Engineer</p>
</blockquote>
<p>The better question would be - where isn't it used? More then 99% of both the
server and client code is written in Python. Using Python allowed the engineers
to be able to quickly test their ideas, fix any problems and bring frequent
updates. They were lucky, as many of their Python solutions scaled surprisingly
well, which meant that "<em>(they) could get to 40M users without having to write
thousands of lines of C code</em>", as the whole platform was still running only a
few hundred lines of Python code even when the number of users started reaching
tens of millions.</p>
<p>Rian also said that every time they tried to anticipate things or "be clever in
advance", they failed - it was much easier to just stay on top of the
architecture as it grew and keep tabs on it, which probably wouldn't be
possible if they weren't using Python.</p>]]></content:encoded>
    </item>
    <item>
      <title>Python in the wide world week - day 1, XBMC</title>
      <link>http://www.natan.termitnjak.net/blog/2013/12/16/python-in-the-wide-world-week-day-1-xbmc</link>
      <pubDate>Mon, 16 Dec 2013 22:20:00 CET</pubDate>
      <category><![CDATA[python]]></category>
      <guid isPermaLink="false">jiGLspowpETdzcy8s2Ufz66zN2U=</guid>
      <description>Python in the wide world week - day 1, XBMC</description>
      <content:encoded><![CDATA[<p>In an effort to actually post something here, I have decided to do a series of
"XXX week" posts. Starting off with a "Python in the wide world week", I'll be
exploring some interesting places where Python is used in the real world.</p>
<h2 id="xbmc"><a href="http://xbmc.org/">XBMC</a></h2>
<p><a href="http://xbmc.org/about/"><img src="/images/xbmc_about.jpg" alt="XBMC"></a></p>
<h3 id="what-is-xbmc">What is XBMC?</h3>
<p><a href="http://xbmc.org/">XBMC</a> is a free and <a href="https://github.com/xbmc/xbmc">open source</a> media player
developed by the <a href="http://xbmc.org/about/xbmc-foundation/">XBMC foundation</a>.
While it was originally created as a media center for the <a href="http://en.wikipedia.org/wiki/Xbox">original Xbox gaming
console</a> (hence the name <strong>XB</strong>ox <strong>M</strong>edia
<strong>C</strong>enter), it is now natively available on Windows, various Linux
distributions, Mac OSX, Android, Raspberry Pi, iOS, Apple TV and Apple TV 2
(<a href="http://xbmc.org/download/">download link</a>). If that is not enough for you,
XMBC also features it's own (Ubuntu based) Linux distribution so you can easily
carry XBMC on your USB key/disk if you wish so.</p>
<p><a href="http://xbmc.org/">XBMC</a> became so popular that it spawned <a href="http://wiki.xbmc.org/index.php?title=Third-party_forks_and_derivatives">loads of
forks</a>,
many of which are now separate products with many users.</p>
<p>I personally use <a href="http://xbmc.org/">XBMC</a> on my Home Theatre PC (HTPC) for watching movies
comfortably, using my Android phone with
<a href="https://play.google.com/store/apps/details?id=org.leetzone.android.yatsewidgetfree&amp;hl=en">Yatse</a>
as a remote.</p>
<h3 id="where-is-python-used">Where is Python used?</h3>
<p>The core for <a href="http://xbmc.org/">XBMC</a> is written in C++, but it <a href="http://wiki.xbmc.org/index.php?title=Python_development">uses
Python</a> for its many
wonderful <a href="http://addons.xbmc.org/">add-ons</a>, which offer everything from
scrapping for metadata, <a href="http://addons.xbmc.org/show/plugin.program.utorrent/">managing your torrent
downloads</a>, surfing the
web, checking <a href="http://addons.xbmc.org/category/weather/">the weather</a>, watching
YouTube or Twitch.tv, automatically downloading
<a href="http://addons.xbmc.org/category/lyrics/">lyrics</a> and (my personal favourite)
automatically downloading
<a href="http://addons.xbmc.org/show/script.xbmc.subtitles/">subtitles</a>.</p>
<p>Believe me, once you get used to quickly and easily getting the subtitles you
won't want to go back to surfing the web, downloading the files, extracting
them, pulling them to the player ...</p>]]></content:encoded>
    </item>
    <item>
      <title>My Sublime Text 2 settings</title>
      <link>http://www.natan.termitnjak.net/blog/2013/12/08/my-sublime-text-2-settings</link>
      <pubDate>Sun, 08 Dec 2013 22:00:00 CET</pubDate>
      <category><![CDATA[sublime text]]></category>
      <category><![CDATA[programming tools]]></category>
      <category><![CDATA[editors]]></category>
      <guid isPermaLink="false">L_-uDkoV-XA6fvqj96fshQtaQgs=</guid>
      <description>My Sublime Text 2 settings</description>
      <content:encoded><![CDATA[<p>In this post I will go through the core addons I use (I might use some more
here and there but these are the ones I find the most useful).</p>
<h2 id="addons-i-use">Addons I use</h2>
<table class="table table-striped table-bordered">
    <thead>
        <tr>
            <th>Addon name and link</th>
            <th>Description</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>
                <a href="https://github.com/simme--/Auto-Encoding-for-Python">
                    Auto Encoding for Python
                </a>
            </td>
            <td>

                Automatically include utf-8 Python encoding where needed.

            </td>
        </tr>
        <tr>
            <td>
                <a href="https://github.com/spadgos/sublime-jsdocs">
                    DocBlockr
                </a>
            </td>
            <td>

                Simplifies writing DocBlock comments in JS, CoffeScript,
                Actionscript, PHP, C, ...

            </td>
        </tr>
        <tr>
            <td>
                <a href="https://github.com/revolunet/sublimetext-markdown-preview">
                    Mako
                </a>
            </td>
            <td>

                Added support for Mako templates highlighting.

            </td>
        </tr>
        <tr>
            <td>
                <a href="https://github.com/revolunet/sublimetext-markdown-preview">
                    Markdown Preview
                </a>
            </td>
            <td>

                Preview for your markdown files.

            </td>
        </tr>
        <tr>
            <td>
                <a href="https://github.com/borist/SublimePaneNavigation">
                    Pane Navigation
                </a>
            </td>
            <td>

                Changes tab navigation (Ctrl + Tab) to be more in
                line with what we're used to.

            </td>
        </tr>
        <tr>
            <td>
                <a href="https://github.com/titoBouzout/SideBarEnhancements">
                    SideBarEnhancements
                </a>
            </td>
            <td>

                Gives extra options in the sidebar.

            </td>
        </tr>
        <tr>
            <td>
                <a href="https://github.com/SublimeCodeIntel/SublimeCodeIntel">
                    SublimeCodeIntel
                </a>
            </td>
            <td>

                Code intelligence plugin (imports autocomplete, function
                tooltips, jump to definition, ... ).

            </td>
        </tr>
        <tr>
            <td>
                <a href="https://github.com/SublimeLinter/SublimeLinter">
                    SublimeLinter
                </a>
            </td>
            <td>

                Support for "lint" programs for many languages.

            </td>
        </tr>
        <tr>
            <td>
                <a href="https://github.com/JulianEberius/SublimeRope">
                    SublimeRope
                </a>
            </td>
            <td>

                Adds Rope (re-factoring library) support.

            </td>
        </tr>
         <tr>
            <td>
                <a href="https://github.com/JulianEberius/SublimeRope">
                    Sublime Wrap Plus
                </a>
            </td>
            <td>

                Extra support for hard line wrap.

            </td>
        </tr>
        <tr>
            <td>
                <a href="https://github.com/amisarca/Sublime-Text-2-Table-Cleaner">
                    TableCleaner
                </a>
            </td>
            <td>

                Cleans tables (aligns and cleans nicely on "pipe" character
                (|), useful for Sphinx documentation, LaTeX etc.).

            </td>
        </tr>
        <tr>
            <td>
                <a href="https://github.com/SublimeText/Tag">
                    Tag
                </a>
            </td>
            <td>

                Provides extra support for HTMLish tags - auto close tags on
                slash, automatically indent tags etc.

            </td>
        </tr>
    </tbody>
</table>

<h3 id="auto-encoding-for-python">Auto Encoding for Python</h3>
<p>Since I speak a language that often uses utf-8 characters, I'm getting tired of
writing <code># -*- coding: utf-8 -*-</code> or something similar on the top of each file
that uses one of those characters. This addon does that for me, only generating
the encoding declaration when it's needed and deleting it when it's not needed
any more.</p>
<h3 id="docblockr">DocBlockr</h3>
<p>Really simplifies the writing of block comments for functions in JS etc. I've
also started working on Python support, but it's not that far along yet. You
can find what I've added on my
<a href="https://github.com/nightmarebadger/sublime-jsdocs/tree/add_python_support">GitHub</a>.</p>
<h3 id="mako">Mako</h3>
<p>Adds the Mako template syntax highlighter to Sublime Text 2. Very useful for
everyone working with Mako templates.</p>
<h3 id="markdown-preview">Markdown Preview</h3>
<p>An addon that allows you quickly build the Markdown in the currently open file
and preview it in the browser. Very useful, especially when you are just
starting to learn Markdown.</p>
<p>Once you generate the file, it's also automatically updated on each save,
making it a very fast way to check how your changes changed the document.</p>
<p>Also supports Git flavoured Markdown, which uses the actual GitHub API, and as
such, a Python with SSL support is required.</p>
<h3 id="pane-navigation">Pane Navigation</h3>
<p>Changing between opened files in Sublime Text 2 using <em>Ctrl+Tab</em> or
<em>Ctrl+Shift+Tab</em> can be an ... interesting experience. It definitely does not
work as you would expect at the beginning (it does not move right or left
through the opened tabs, but rather works through a last-changed list or
something like that).</p>
<p>If you do not like how it's handled in the vanilla install, grab this package,
which changes the navigation to something you're probably more used to
(<em>Ctrl+Tab</em> moves right, <em>Ctrl+Shift+Tab</em> moves left).</p>
<h3 id="sidebarenhancements">SideBarEnhancements</h3>
<p>Adds many new options like deleting, moving, renaming, copying etc. to the
Sidebar. Frankly I've used this since I started using ST2 so I'm not completely
sure which options are integrated and which options are added by the package,
but you surely have nothing to lose by installing this.</p>
<h3 id="sublimecodeintel">SublimeCodeIntel</h3>
<p>Adds code intelligence, ported from <a href="http://www.openkomodo.com/">Open Komodo
Editor</a>. Adds stuff like function call tool tips,
auto completion from imports, jump to symbol definition etc.</p>
<h3 id="sublimelinter">SublimeLinter</h3>
<p>Adds support for "lint" programs for many languages. This is an invaluable tool
that constantly checks your code to see if it's up to the standards, making it
easy to produce better code faster. Do not even think if you need this or not -
just install it :).</p>
<h3 id="sublimerope">SublimeRope</h3>
<p>Adds support for the Rope (re-factoring library), making it even easier to
re-factor and restructure your code, automatically manage your imports, get
documentation, features an extended auto completion etc.</p>
<h3 id="sublimewrapplus">SublimeWrapPlus</h3>
<p>Better hard line wrapping (<em>Alt+Q</em>), now works correctly in many instances
where it didn't work as expected before (for instance in Markdown lists).</p>
<h3 id="tablecleaner">TableCleaner</h3>
<p>I use it to align tables/data that I write. Very useful when trying to organise
some data or when writing LaTeX or Markdown tables.</p>
<h3 id="tag">Tag</h3>
<p>Extra support for writing HTML tags, makes writing HTML much easier and faster.
It helps with closing tags, adds autocompletion for HTML tags using <em>Tab</em> etc.</p>
<h2 id="personal-settings">Personal settings</h2>
<p>I will not list my full settings (which include dictionaries etc.) or settings
for individual addons, but rather just the base settings I think might be
useful to everyone.</p>
<pre><code>{
    "ensure_newline_at_eof_on_save": true,
    "fallback_encoding": "UTF-8",
    "hot_exit": false,
    "remember_open_files": false,
    "rulers":
    [
        79
    ],
    "tab_size": 4,
    "translate_tabs_to_spaces": true,
    "trim_trailing_white_space_on_save": true
}
</code></pre>
<p>The settings are more or less self explanatory - I make sure to always use
spaces instead of tabs (one tab equals to 4 spaces), ensure a newline at the
end of file and trim trailing white space on save.</p>
<p>I also disabled "hot exit", which closes without prompting to save and
preserves your changes until you open Sublime Text 2 again. This, in addition
to disabling the "remember_open_files" option makes sure I always start with a
clean editor (unless it crashed, where everything is still preserved and all
windows are reopened).</p>
<p>I also set a ruler to 79 characters for keeping with Python coding standards.</p>]]></content:encoded>
    </item>
    <item>
      <title>Battle of the editors - Sublime Text 2</title>
      <link>http://www.natan.termitnjak.net/blog/2013/11/11/battle-of-the-editors-sublime-text-2</link>
      <pubDate>Mon, 11 Nov 2013 02:30:00 CET</pubDate>
      <category><![CDATA[sublime text]]></category>
      <category><![CDATA[programming tools]]></category>
      <category><![CDATA[editors]]></category>
      <guid isPermaLink="false">7MYn-UjatGT908QveKfIYvsM57o=</guid>
      <description>Battle of the editors - Sublime Text 2</description>
      <content:encoded><![CDATA[<p>As most of us, I've been struggling with finding the "perfect" editor. For me,
that meant an editor that could be used for many different languages (C,
Python, HTML, CSS, JavaScript, ... ), could also be used for "normal" use
(Markdown, RST, LaTeX), would start up fast and generally be fast enough so I
didn't have to wait around for it and could optionally be extended with various
plugins.</p>
<p>Furthermore, I'd like the "out of the box" functionality to be good, and if at
all possible, it should be easy to synchronise my settings across devices.
Working under multiple platforms would also be a plus, since I couldn't count
on always working on the same operating system.</p>
<p>In the end, I have found what I have been looking for in Sublime Text 2, which,
at least for now, is close enough to my "perfect" editor that I do not feel the
need to test out new editors.</p>
<p>This editor is light, fast and has a nice &amp; clean design. The out of the box
functionality is good, and can very easily be extended using packages from the
Package control. It's also Python based, so writing or changing/adding to
plugins is a breeze. Additionally, it offers some really useful features I
haven't seen in other editors I have used.</p>
<h2 id="editors-i-have-used-in-the-past">Editors I have used in the past</h2>
<p>The editors I've gone through until now are:</p>
<ul>
<li><strong>Vim</strong>: While complex and "strange", it allowed me to do practically
  everything and could be extended in many ways. Since it's a console editor, I
  still use it when I don't have access to the GUI and for simple tasks.</li>
<li><strong>TextPad</strong>: We used this at the university, and while it was OK for what we
  needed it, it didn't impress me in any way.</li>
<li><strong>Notepad++</strong>: Same as above.</li>
<li><strong>Eclipse / Aptana studio</strong>: As I started working with Python more I started
  looking for an IDE that I could use instead of just using Vim. I've come
  across Aptana studio (Eclipse for web development and Python). While
  powerful, it was too big, clunky and slow for my tastes.</li>
<li><strong>Sublime Text 2</strong>: Another editor I came across at the university - this
  time a professor used it on his Mac, so I didn't really pay attention to it.
  Later found out it works in Windows and Linux too so I took it for a test run
  and haven't looked back since :)</li>
</ul>
<h2 id="best-sublime-text-2-features">Best Sublime Text 2 features</h2>
<p>This is in no way a complete list of Sublime Text 2 features, it is just a list
of my personal favourite things about Sublime Text.</p>
<h3 id="goto-anything">Goto anything</h3>
<p>This here is amazing and I use it all the time. Basically, it allows you to
press <em>Ctrl+P</em> to search over all the files opened in the editor and (very!)
quickly search and change between them. It is also not only limited to simple
file searching and opening, but you can also:</p>
<ul>
<li>Start typing to search between the files</li>
<li>Type "@"" to search between sections of the file (headers, function
  definitions etc.)</li>
<li>Type "#"" to search within the file</li>
<li>Type ":" to go to a line number</li>
</ul>
<p>And now the real catch - these options can be combined! So I can fire up the
Goto anything using the command <em>Ctrl+P</em>, write "edit" to find the
"battle-of-the-editors.markdown" file, then continue with "edit@got" to find
this section, or do an "edit#combined" to directly search for "combined", or do
"edit:50" to go to the 50th line of the file.</p>
<p>Of course you can still use the normal <em>Ctrl+F</em> to search inside the opened
file and <em>Ctrl+G</em> for goto line.</p>
<h3 id="command-palette">Command palette</h3>
<p>Just press <em>Ctrl+Shift+P</em> to fire up the command palette, which holds
infrequently used functionality (indentation settings, changing the syntax,
sorting, ... ). No more trying to remember hundreds of key bindings or
searching through the menu for every minor thing. As above, this is dynamically
filtered on each keystroke and is very fast.</p>
<h3 id="multiple-selection">Multiple selection</h3>
<p>Press <em>Ctrl+D</em> to select the next occurrence of the selected word. Once you
have all of them selected, you can simply change them in one go (useful for
changing a variable name etc.).</p>
<p>An even more impressive feature, and one that you find yourself using way more
then you thought you would, is the command <em>Ctrl+Shift+L</em>, which splits the
selection into lines. Let's say you want to convert a list of student names
from a .txt file with each student in it's line to an actual Python list. To do
this, you need to add the opening and closing brackets and quotation marks
around each one. Using the above command, it is really simple - just select
everything (<em>Ctrl+A</em>), split selection into lines (<em>Ctrl+Shift+L</em>)), press
<em>Home</em> to get to the beginning of each line and add the quotation mark, press
<em>End</em> to go to the end of each line and add a quotation mark and a comma. All
that remains is to add the brackets at the beginning and end. Of course, if you
wanted them all to be in a single line, you could just press <em>Delete</em> after
adding the comma.</p>
<p>Believe me, once you get used to doing things this way, you will wonder how you
ever managed to make do without it.</p>
<h3 id="hard-line-wrap">Hard line wrap</h3>
<p>This is a feature I didn't at all until I started writing some more stuff in
Markdown, as I wrap my code by hand. Do you know that feeling when you write a
big paragraph and everything is nicely wrapped at the 80 char limit ... until
you see you forgot to write a word or two that is - you add the words at the
start somewhere, and now the whole paragraph is wrapped wrong. Do you want to
go through the whole thing again by hand and fix it so it's wrapped nicely? I
sure don't.</p>
<p>And that is exactly the reason why I started using the hard line wrap
(<em>Alt+Q</em>), which does the work for you. If you ever add or delete a word
somewhere in the paragraph, just press <em>Alt+Q</em> and it's done.</p>
<p>To make sure everything works fine even in markdown lists, code comments etc. I
recommend installing the <a href="https://github.com/ehuss/Sublime-Wrap-Plus">Sublime Wrap
Plus</a> package (read below how to
install packages easily).</p>
<h3 id="spell-check">Spell check</h3>
<p>Integrated spell checker to use when writing LaTeX, Markdown, RST etc. It uses
LibreOffice dictionaries so you can download the language you want. Enable it
with <em>F6</em>.</p>
<h3 id="moving-selected-lines-up-or-down">Moving selected lines up or down</h3>
<p>Select a few lines of your text, hold down <em>Ctrl+Shift</em> and press up or down.
The selection will move up or down according to your commands, "pushing" the
other lines above or below it (depending on which way you're going of course).
A simple and fast way of moving some code around, plus it looks like magic to
anyone looking over your shoulder :).</p>
<h3 id="sort-lines-and-removing-duplicate-lines">Sort lines and removing duplicate lines</h3>
<p>Sublime Text 2 comes with an integrated command to sort lines (<em>F9</em> or open up
the command palette and find it there). Those pesky imports at the top of each
file that you want to sort alphabetically? Well, now you can do it, quick and
easy.</p>
<p>Another great feature can be found under <em>Edit &gt; Permute Lines &gt; Unique</em>, which
gets rid of the duplicates.</p>
<p>Using a combination of those commands together with the
<a href="https://github.com/amisarca/Sublime-Text-2-Table-Cleaner">TableCleaner</a> you
can make data gotten from logs, debugs etc. presentable and readable very
quickly and easily.</p>
<h3 id="package-control"><a href="https://sublime.wbond.net/">Package control</a></h3>
<p>Leaving the best for last, this is the heart and soul of Sublime Text 2 for
me. It is a great and easy way to install and manage your packages.</p>
<p>Basically it allows you to download packages through the Command palette
(<em>Ctrl+Shift+P</em>) with the "Package control: Install Package" command, which
looks on the web to find the list of all packages with their descriptions that
can be searched as all other commands in the Command palette can.</p>
<p>Once you find the package you are looking for, just press enter to quickly and
easily install it and add it to your packages, which will automatically update
the packages when a new version is released.</p>
<p>Each package is also neatly organised, and comes with it's own commands
automatically added to the Command palette and it's own default and user
settings.</p>
<h2 id="personal-settings">Personal settings</h2>
<p>A blog post with my personal settings, the packages I use and how I keep
everything synchronised between machines will follow soon.</p>]]></content:encoded>
    </item>
    <item>
      <title>Welcome to the blog!</title>
      <link>http://www.natan.termitnjak.net/blog/2013/11/07/welcome-to-the-blog</link>
      <pubDate>Thu, 07 Nov 2013 00:33:00 CET</pubDate>
      <category><![CDATA[welcome]]></category>
      <guid isPermaLink="false">HhVlpEUbvimXzvxYJhAU8jytLWY=</guid>
      <description>Welcome to the blog!</description>
      <content:encoded><![CDATA[<p>With this post, my blog is officially open for business. It will primarily be
used for Python related stuff and I am working on some <a href="/tutorials">tutorials</a>
to put on here. The first one is already up so feel free to go read it and
leave your comments!</p>
<p>For the more technically inclined, an explanation of how the blog is set up.</p>
<ul>
<li>Built by <a href="http://www.blogofile.com/">Blogofile</a>, a Python static website
  compiler</li>
<li><a href="http://getbootstrap.com/">Twitter Bootstrap 3</a> for responsiveness</li>
<li><a href="http://disqus.com/">Disqus</a> for comments</li>
<li>Git on <a href="https://github.com/">GitHub</a> for version control</li>
</ul>
<p>I use two repositories on GitHub, one for the
<a href="https://github.com/nightmarebadger/my_blog">source</a> and the second one for the
<a href="https://github.com/nightmarebadger/my_blog_generated">generated source</a>. The
generated source repository is then cloned to the hosting provider and hosted
from there as plain HTML.</p>
<p>The posts themselves can be written in Markdown, HTML or RST, while the
tutorials are written in the <a href="http://ipython.org/notebook.html">IPython
Notebook</a> and then converted to basic HTML
and integrated into the blog using Blogofile's controllers and <a href="http://www.makotemplates.org/">Mako
templates</a>.</p>
<p>More information on how to set up your own Blogofile blog in a similar way to
follow.</p>]]></content:encoded>
    </item>
  </channel>
</rss>
